name: Release
on:
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.4.0"
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.1
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_TOKEN }}
      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ matrix.python-version }}
      # - name: Run image
      #   uses: abatilo/actions-poetry@v2
      #   with:
      #     poetry-version: ${{ matrix.poetry-version }}
      # - name: Publish
      #   env:
      #     PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      #   run: |
      #     poetry config pypi-token.pypi $PYPI_TOKEN
      #     poetry version $(git describe --tags --abbrev=0)
      #     poetry publish --build